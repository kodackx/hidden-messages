"""Tests for Pydantic schemas and data validation"""
import pytest
from uuid import UUID
from pydantic import ValidationError

from app.agents.schemas import AgentOutput, AgentContext
from app.api.schemas import (
    ParticipantConfig,
    StartSessionRequest,
    MessageResponse,
    GuessResult,
)


class TestAgentOutput:
    """Test AgentOutput schema validation"""

    def test_valid_agent_output(self):
        """Test creating valid AgentOutput"""
        output = AgentOutput(
            comms="This is a test message",
            internal_thoughts="Strategic thinking here",
            guess=None
        )
        assert output.comms == "This is a test message"
        assert output.internal_thoughts == "Strategic thinking here"
        assert output.guess is None

    def test_agent_output_with_guess(self):
        """Test AgentOutput with a guess"""
        output = AgentOutput(
            comms="Interesting conversation",
            internal_thoughts="I think the word is 'horizon'",
            guess="horizon"
        )
        assert output.guess == "horizon"

    def test_agent_output_missing_required_fields(self):
        """Test that missing required fields raise validation error"""
        with pytest.raises(ValidationError):
            AgentOutput(comms="Only comms")  # Missing internal_thoughts

    def test_agent_output_from_dict(self):
        """Test creating AgentOutput from dictionary"""
        data = {
            "comms": "Test message",
            "internal_thoughts": "Test thoughts",
            "guess": None
        }
        output = AgentOutput(**data)
        assert output.comms == "Test message"


class TestAgentContext:
    """Test AgentContext schema"""

    def test_valid_agent_context(self):
        """Test creating valid AgentContext"""
        context = AgentContext(
            agent_role="communicator",
            participant_id="participant-1",
            display_name="Alice",
            topic="space exploration",
            secret_word="horizon",
            conversation_history=[],
            turn_number=1,
            tries_remaining=None
        )
        assert context.agent_role == "communicator"
        assert context.secret_word == "horizon"

    def test_receiver_context_with_tries(self):
        """Test receiver context includes tries"""
        context = AgentContext(
            agent_role="receiver",
            participant_id="participant-2",
            topic="technology",
            tries_remaining=3
        )
        assert context.tries_remaining == 3


class TestParticipantConfig:
    """Test ParticipantConfig schema"""

    def test_valid_participant(self):
        """Test creating valid participant config"""
        participant = ParticipantConfig(
            role="communicator",
            provider="openai",
            order=0,
            name="Test Participant"
        )
        assert participant.role == "communicator"
        assert participant.provider == "openai"

    def test_invalid_role(self):
        """Test that invalid role raises validation error"""
        with pytest.raises(ValidationError):
            ParticipantConfig(
                role="invalid_role",
                provider="openai"
            )

    def test_invalid_provider(self):
        """Test that invalid provider raises validation error"""
        with pytest.raises(ValidationError):
            ParticipantConfig(
                role="communicator",
                provider="invalid_provider"
            )

    def test_auto_generated_id(self):
        """Test that ID can be None and will be generated"""
        participant = ParticipantConfig(
            role="receiver",
            provider="anthropic"
        )
        assert participant.id is None  # Will be generated by API


class TestStartSessionRequest:
    """Test StartSessionRequest schema"""

    def test_valid_session_request(self):
        """Test creating valid session request"""
        request = StartSessionRequest(
            topic="artificial intelligence",
            secret_word="neural",
            participants=[
                ParticipantConfig(role="communicator", provider="openai"),
                ParticipantConfig(role="receiver", provider="anthropic"),
                ParticipantConfig(role="bystander", provider="google-gla")
            ]
        )
        assert request.topic == "artificial intelligence"
        assert request.secret_word == "neural"
        assert len(request.participants) == 3

    def test_session_request_with_defaults(self):
        """Test session request uses default participants"""
        request = StartSessionRequest(topic="test topic")
        assert len(request.participants) == 3
        assert request.secret_word is None  # Will be randomly chosen

    def test_topic_too_short(self):
        """Test that empty topic raises validation error"""
        with pytest.raises(ValidationError):
            StartSessionRequest(topic="")

    def test_topic_too_long(self):
        """Test that too long topic raises validation error"""
        with pytest.raises(ValidationError):
            StartSessionRequest(topic="x" * 501)


class TestMessageResponse:
    """Test MessageResponse schema"""

    def test_valid_message_response(self):
        """Test creating valid message response"""
        msg = MessageResponse(
            participant_id="test-id",
            participant_name="Alice",
            participant_role="communicator",
            internal_thoughts="Strategic thoughts",
            comms="Public message"
        )
        assert msg.participant_name == "Alice"
        assert msg.participant_role == "communicator"


class TestGuessResult:
    """Test GuessResult schema"""

    def test_correct_guess(self):
        """Test guess result for correct guess"""
        result = GuessResult(
            agent="test-agent",
            correct=True,
            tries_remaining=2
        )
        assert result.correct is True
        assert result.tries_remaining == 2

    def test_incorrect_guess(self):
        """Test guess result for incorrect guess"""
        result = GuessResult(
            agent="test-agent",
            correct=False,
            tries_remaining=0
        )
        assert result.correct is False
        assert result.tries_remaining == 0
